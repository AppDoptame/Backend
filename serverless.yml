service: Backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
  environment:
    userPoolId: {Ref: UserPool}
    clientId: {Ref: UserClient}
    petTable: {Ref: PetsTable}
    postsTable: {Ref: PostsTable}
    commentsTable: {Ref: CommentsTable}
    petsBucket: {Ref: AppDoptamePetsBucket}
  iam:
    role:
        statements:
          - Effect: Allow
            Action:
              - cognito-idp:*
            Resource:
              - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
          - Effect: Allow
            Action: 
              - dynamodb:PutItem
              - dynamodb:Scan
            Resource: { "Fn::GetAtt" : ["PetsTable", "Arn"]  }
          - Effect: Allow
            Action: 
              - dynamodb:PutItem
              - dynamodb:Scan
            Resource: { "Fn::GetAtt" : ["PostsTable", "Arn"]  }
          - Effect: Allow
            Action: 
              - dynamodb:PutItem
            Resource: { "Fn::GetAtt" : ["CommentsTable", "Arn"]  }
          - Effect: "Allow"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "AppDoptamePetsBucket" }, "/*" ] ]  }

functions:
  signUp:
    handler: src/auth/sign_up.sign_up
    timeout: 30
    events:
      - httpApi:
          path: /sign-up
          method: post

  signIn:
    handler: src/auth/sign_in.sign_in
    timeout: 30
    events:
      - httpApi:
          path: /sign-in
          method: post

  
  confirmSignUp:
    handler: src/auth/confirm_sign_up.confirm_sign_up
    timeout: 30
    events:
      - httpApi:
          path: /confirm-sign-up
          method: post
  
  createPet:
    handler: src/pets/create_pet.create_pet
    timeout: 30
    events:
      - httpApi:
          path: /create-pet
          method: post

  getPetByEmail:
    handler: src/pets/get_pets_by_email.get_pets_by_email
    timeout: 30
    events:
      - httpApi:
          path: /get-pets-by-email/{email}
          method: get
  
  getAllPets:
    handler: src/pets/get_all_pets.get_all_pets
    timeout: 30
    events:
      - httpApi:
          path: /get-all-pets
          method: get

  createPost:
    handler: src/posts/create_post.create_post
    timeout: 30
    events:
      - httpApi:
          path: /create-post
          method: post
  
  getAllPosts:
    handler: src/posts/get_all_posts.get_all_posts
    timeout: 30
    events:
      - httpApi:
          path: /get-all-posts
          method: get

  uploadImages:
    handler: src/posts/upload_images.upload_images
    timeout: 30
    events:
      - httpApi:
          path: /upload-images
          method: post
  
  # createAssitant:
  #   handler: src/chat/creator.creator
  #   timeout: 30
  #   events:
  #     - httpApi:
  #         path: /create-assistant
  #         method: get
  
  createThread:
    handler: src/chat/thread.thread
    timeout: 30
    events:
      - httpApi:
          path: /create-thread
          method: get
          
  addMessage:
    handler: src/chat/add_message.add_message
    timeout: 30
    events:
      - httpApi:
          path: /add-message
          method: post

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: AppDoptame-UserPool-${self:provider.stage}
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireUppercase: true
            RequireSymbols: true
        AutoVerifiedAttributes:
          - email
    
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: AppDoptame-UserClient-${self:provider.stage}
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: hours
        AccessTokenValidity: 3
        IdTokenValidity: 3
        RefreshTokenValidity: 3
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    AppDoptamePetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: appdoptame-pets-bucket-${self:provider.stage}

    PetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppDoptame-PetsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppDoptame-PostsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppDoptame-CommentsTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
package:
  individually: true
  patterns:
    - 'node_modules/**'

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
    layer: true

# plugins:
#   - serverless-offline
#   - serverless-python-requirements